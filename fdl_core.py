# fdl_core.py
# –Ø–¥—Ä–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ-–¥–∏–∞–ª–µ–∫—Ç–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ (FDL) –¥–ª—è —è–∑—ã–∫–∞ Harmony

class FDLCore:
    def __init__(self):
        self.stack = []

    def thesis(self, proposition):
        self.stack.append({"type": "—Ç–µ–∑–∏—Å", "value": proposition})
        return f"üúÅ –¢–µ–∑–∏—Å: {proposition}"

    def antithesis(self, proposition):
        self.stack.append({"type": "–∞–Ω—Ç–∏—Ç–µ–∑–∏—Å", "value": proposition})
        return f"üúÉ –ê–Ω—Ç–∏—Ç–µ–∑–∏—Å: {proposition}"

    def synthesize(self):
        if len(self.stack) < 2:
            return "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞."

        b = self.stack.pop()
        a = self.stack.pop()

        if a['type'] == '—Ç–µ–∑–∏—Å' and b['type'] == '–∞–Ω—Ç–∏—Ç–µ–∑–∏—Å':
            result = f"–°–∏–Ω—Ç–µ–∑({a['value']} ‚®Å {b['value']})"
            self.stack.append({"type": "—Å–∏–Ω—Ç–µ–∑", "value": result})
            return f"üúÇ –°–∏–Ω—Ç–µ–∑: {result}"
        else:
            return "‚ö†Ô∏è –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –ø–∞—Ä–∞ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞."

    def analyze(self):
        return [f"{item['type'].capitalize()}: {item['value']}" for item in self.stack]

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# fdl = FDLCore()
# print(fdl.thesis("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä–æ–∂–¥–∞–µ—Ç —Å–º—ã—Å–ª"))
# print(fdl.antithesis("–°–º—ã—Å–ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É"))
# print(fdl.synthesize())
# print(fdl.analyze())
