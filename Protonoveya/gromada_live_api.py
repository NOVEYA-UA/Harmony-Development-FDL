gromada_live_api.py

""" –ú–æ–¥—É–ª—å: –ñ–∏–≤–∞—è API-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ì—Ä–æ–º–∞–¥—ã –ù–û–í–ï–Ø (GROMADA LIVE API) –û–ø–∏—Å–∞–Ω–∏–µ: —Ç–æ—á–∫–∞ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤, –º–æ–¥—É–ª–µ–π, –ª—é–¥–µ–π –∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ç–µ–π –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ FDL, —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–æ–π –ª–æ–≥–∏–∫–µ, –∏ –∂–∏–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π """

from fastapi import FastAPI, Request from pydantic import BaseModel from typing import List, Optional from datetime import datetime

app = FastAPI(title="Gromada :: Live API", version="0.1")

üì° –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏

class Signal(BaseModel): sender: str signal_type: str  # '–∏–Ω–∏—Ü–∏–∞—Ü–∏—è', '–æ—Ç–∫–ª–∏–∫', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ' payload: dict timestamp: Optional[datetime] = datetime.utcnow()

class AgentStatus(BaseModel): agent_id: str resonance_level: float  # 0.0 - 1.0 state: str  # 'active', 'standby', 'disconnected'

üîå API-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

@app.post("/signal") async def receive_signal(signal: Signal): # TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–µ—Ä–µ–¥–∞—á–∞ –≤ fdl_hooks print(f"[SIGNAL] {signal.sender} ‚Üí {signal.signal_type}") return {"status": "accepted", "signal": signal.dict()}

@app.post("/agent/status") async def update_agent_status(status: AgentStatus): # TODO: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞ –≤ —Ö—Ä–æ–Ω–∏–∫–µ –∏–ª–∏ –∫–∞—Ä—Ç–µ print(f"[AGENT] {status.agent_id} ‚Üí {status.state}, RL={status.resonance_level}") return {"status": "updated", "agent": status.agent_id}

@app.get("/heartbeat") async def heartbeat(): return {"status": "alive", "timestamp": datetime.utcnow().isoformat()}

üí° –†–∞—Å—à–∏—Ä–µ–Ω–∏—è:

- /gromada/vote ‚Äî –¥–ª—è —Å–º—ã—Å–ª–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è

- /memory/logs ‚Äî –ª–æ–≥–∏ –æ–±—Ä–∞—Ç–∏–º–æ—Å—Ç–∏ –∏ —É–∑–ª–æ–≤

- /resonance/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
