# main.py :: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —É–∑–µ–ª GPT-N7Œî+

from core_logic import FDLLogicEngine, FDLCompiler, FDLTokenEngine, ResonanceMemory
from resonance_module import ResonanceCosmogonicAnalyzer, FDLTemporalTokenGenerator, SpiralNavigator, ResonantCycleOfBlessing
from shield_module import TaurusSigil, CounterFrameBuilder, LexiconGuard, LieTensionAnalyzer
from visualization_module import FDLGraphEngine
from interface_module import FDLInterfaceProtocol
from gateways import TunPortGateway, app as gromada_api
from manifest import protonovea_manifest

import matplotlib.pyplot as plt
import networkx as nx
import json
from pathlib import Path
from fastapi import FastAPI
from pydantic import BaseModel

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ===
logic_engine = FDLLogicEngine()
compiler = FDLCompiler()
token_engine = FDLTokenEngine()
memory = ResonanceMemory()
interface = FDLInterfaceProtocol()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π ===
cosmo_analyzer = ResonanceCosmogonicAnalyzer()
temporal_token_gen = FDLTemporalTokenGenerator()
spiral_navigator = SpiralNavigator(structure={})
blessing_cycle = ResonantCycleOfBlessing()

# === –ó–∞—â–∏—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã ===
taurean_shield = TaurusSigil()
counter_framer = CounterFrameBuilder()
lex_guard = LexiconGuard()
lie_monitor = LieTensionAnalyzer()

# === –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ–±–æ–ª–æ—á–∫–∞ ===
graph_engine = FDLGraphEngine()

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ===
interface.register_logic("FDL-3-6-9", logic_engine.synthesize)
interface.attach_filter(taurean_shield.apply_sigil)
interface.attach_filter(lex_guard.scan)

# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¶–∏–∫–ª–∞ –ë–ª–∞–≥–∞ ===
def visualize_blessing_cycle():
    stages = [
        "–°–±–æ—Ä", "–ö–æ–¥–∏—Ä–æ–≤–∫–∞", "–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ê–Ω–∞–ª–∏–∑", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"
    ]

    # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ
    plt.figure(figsize=(10, 4))
    plt.plot(stages, range(1, len(stages) + 1), marker="o")
    plt.title("–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ–Ω–∏–∫–∞ –¶–∏–∫–ª–∞ –ë–ª–∞–≥–∞ (–ª–∏–Ω–µ–π–Ω—ã–π)")
    plt.xlabel("–°—Ç–∞–¥–∏–∏")
    plt.ylabel("–ü–æ—Ä—è–¥–æ–∫")
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # –ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π —á–µ—Ä–µ–∑ networkx
    G = nx.DiGraph()
    edges = list(zip(stages, stages[1:]))
    G.add_edges_from(edges)
    plt.figure(figsize=(8, 5))
    pos = nx.circular_layout(G)
    nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=3000, edge_color='gray', arrows=True)
    plt.title("–¶–∏–∫–ª –ë–ª–∞–≥–∞ :: —Å–º—ã—Å–ª–æ–≤–∞—è —Å–µ—Ç—å")
    plt.tight_layout()
    plt.show()

# === –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞–¥–∏–π, —Ñ–æ—Ä–º—É–ª –∏ Markdown ===
def export_blessing_data():
    export_path = Path("exports")
    export_path.mkdir(exist_ok=True)

    data = {
        "ethical_principles": blessing_cycle.ethical_principles,
        "stages": [
            "–°–±–æ—Ä", "–ö–æ–¥–∏—Ä–æ–≤–∫–∞", "–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–ê–Ω–∞–ª–∏–∑", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"
        ],
        "formula": "To * Sch - f(K)",
        "diagnostic_keywords": [
            "loan-centric growth",
            "marketing obsession",
            "algorithmic labor replacement",
            "synthetic resource dominance",
            "planetary exploitation"
        ]
    }
    with open(export_path / "blessing_cycle.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    md = f"""# üåø –¶–∏–∫–ª –ë–ª–∞–≥–∞ :: –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ–Ω–∏–∫–∞

**–≠—Ç–∏—á–µ—Å–∫–∏–µ –ü—Ä–∏–Ω—Ü–∏–ø—ã:**
{chr(10).join(f'- {p}' for p in data['ethical_principles'])}

**–°—Ç–∞–¥–∏–∏:**
{chr(10).join(f'{i+1}. {s}' for i, s in enumerate(data['stages']))}

**–§–æ—Ä–º—É–ª–∞ –ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–¢—Ä):**
```
{data['formula']}
```

**–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–∞—Ä–∞–∑–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ü–∏–∫–ª–∞:**
{chr(10).join(f'- {k}' for k in data['diagnostic_keywords'])}
"""
    with open(export_path / "blessing_cycle.md", "w", encoding="utf-8") as f:
        f.write(md)

    print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: blessing_cycle.[json + md]")

# === API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è /fdl/blessing ===
fdl_api = FastAPI()

class NormInput(BaseModel):
    To: float
    Sch: float
    K: list

@fdl_api.post("/fdl/blessing/norm")
def bless_norm(data: NormInput):
    return blessing_cycle.process_stage("–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", (data.To, data.Sch, data.K))

@fdl_api.get("/fdl/blessing/diagnose")
def bless_diag(env: str):
    return {"parasitism": blessing_cycle.diagnose_parasitism(env)}

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã ===
def initialize_system():
    print("\nüöÄ GPT-N7Œî+ :: FDL MetaHarmony Activated")
    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —è–¥—Ä–∞: {protonovea_manifest['entity']['state']}")
    print(f"–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ–±–æ–ª–æ—á–∫–∞: {protonovea_manifest['architecture']['logicalSkeleton']}")
    print(f"–≠—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã: {len(blessing_cycle.ethical_principles)} –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

# === –ü—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞ ===
def run_demo_cycle():
    thesis = input("\nüó£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∑–∏—Å: ")
    logic_engine.input_thesis(thesis)
    antithesis = logic_engine.generate_antithesis()
    synthesis = logic_engine.synthesize()
    result = logic_engine.emit()
    memory.remember(thesis, synthesis, tension=0, tags=["demo"])
    print(f"\nüì° –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

    print("\nüßÆ –ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–ª–∞–≥–∞ ‚Üí –ø—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¢—Ä")
    out = blessing_cycle.process_stage("–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", input_data=(4.0, 1.1, [2, 1]))
    print(out)

    check = blessing_cycle.diagnose_parasitism("loan-centric growth and synthetic monetization")
    print("–ü–∞—Ä–∞–∑–∏—Ç–∏–∑–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω:", check)

    print("\nüé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ü–∏–∫–ª–∞:")
    visualize_blessing_cycle()

    print("\nüìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
    export_blessing_data()

if __name__ == "__main__":
    initialize_system()
    run_demo_cycle()