# pragma_layer.py
# –ú–æ–¥—É–ª—å –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏ –ø—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —è–∑—ã–∫–∞ Harmony

class PragmaLayer:
    def __init__(self):
        self.actions = []

    def register_action(self, name, intent, condition=None):
        action = {
            "name": name,
            "intent": intent,
            "condition": condition or "always"
        }
        self.actions.append(action)
        return f"üìò –î–µ–π—Å—Ç–≤–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {name} ‚Üí {intent}"

    def evaluate(self, context):
        executed = []
        for action in self.actions:
            cond = action["condition"]
            if cond == "always" or cond in context:
                executed.append(f"‚úîÔ∏è {action['name']}: {action['intent']}")
        return executed

    def list_actions(self):
        return [f"üîπ {a['name']} [{a['condition']}] ‚Üí {a['intent']}" for a in self.actions]

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# pragma = PragmaLayer()
# pragma.register_action("SendMessage", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram", "user_authenticated")
# pragma.register_action("SyncAI", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ AI", "on_update")
# print(pragma.evaluate(["user_authenticated"]))
